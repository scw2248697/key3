
/*
 * --------------------
 * Company							: Tianjin techvan
 * --------------------
 * Project Name					: AGV
 * Description					: C file
 * --------------------
 * Tool Versions				: uVision V5.17.0.0
 * Target Device				: STM32F407IGT6
 * --------------------
 * Engineer							: wangyulong
 * Revision							: 1.0
 * Created Date					: 2016.01.03
 * --------------------
 * Engineer							:
 * Revision							:
 * Modified Date				:
 * --------------------
 * Additional Comments	:
 *
 * --------------------
 */
#include "can.h"
#include "led.h"
#include "delay.h"
#include "usart.h"
#include "string.h"
#include "commhead.h"
#include "FM1702.h"

u8 recvBuffer[128];
u8 relayBuffer[128];
u8 sendBuffer[32];
u16 recvBufferCount=0;
u8 relayBuf[16];
u8 *WRPtr=recvBuffer;
u8 *RDPtr=recvBuffer;

u8 choiceFlag1=0;
u8 choiceFlag2=0;
u8 chipID =3;
u16 std_id =0x0000;





u8 CAN_Mode_Init(u8 tsjw,u8 tbs2,u8 tbs1,u16 brp,u8 mode)
{
    GPIO_InitTypeDef 		GPIO_InitStructure;
    CAN_InitTypeDef        	CAN_InitStructure;
    CAN_FilterInitTypeDef  	CAN_FilterInitStructure;
#if CAN_RX0_INT_ENABLE
    NVIC_InitTypeDef  		NVIC_InitStructure;
#endif

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//使能PORTA时钟



    RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);//使能CAN1时钟

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽
    GPIO_Init(GPIOA, &GPIO_InitStructure);			//初始化IO

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	//上拉输入
    GPIO_Init(GPIOA, &GPIO_InitStructure);			//初始化IO

    //CAN单元设置
    CAN_InitStructure.CAN_TTCM=DISABLE;			//非时间触发通信模式
    CAN_InitStructure.CAN_ABOM=DISABLE;			//软件自动离线管理
    CAN_InitStructure.CAN_AWUM=DISABLE;			//睡眠模式通过软件唤醒(清除CAN->MCR的SLEEP位)
    CAN_InitStructure.CAN_NART=ENABLE;			//禁止报文自动传送
    CAN_InitStructure.CAN_RFLM=DISABLE;		 	//报文不锁定,新的覆盖旧的
    CAN_InitStructure.CAN_TXFP=DISABLE;			//优先级由报文标识符决定
    CAN_InitStructure.CAN_Mode= mode;	        //模式设置： mode:0,普通模式;1,回环模式;
    //设置波特率
    CAN_InitStructure.CAN_SJW=tsjw;				//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位  CAN_SJW_1tq	 CAN_SJW_2tq CAN_SJW_3tq CAN_SJW_4tq
    CAN_InitStructure.CAN_BS1=tbs1; 			//Tbs1=tbs1+1个时间单位CAN_BS1_1tq ~CAN_BS1_16tq
    CAN_InitStructure.CAN_BS2=tbs2;				//Tbs2=tbs2+1个时间单位CAN_BS2_1tq ~	CAN_BS2_8tq
    CAN_InitStructure.CAN_Prescaler=brp;        //分频系数(Fdiv)为brp+1
    CAN_Init(CAN1, &CAN_InitStructure);        	//初始化CAN1

    CAN_FilterInitStructure.CAN_FilterNumber=0;	//过滤器0
    CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdList; 	//屏蔽位模式
    CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; 	//32位宽
    CAN_FilterInitStructure.CAN_FilterIdHigh=std_id<<5;	//32位ID
    CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;
    CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;//32位MASK
    CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;//过滤器0关联到FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;//激活过滤器0

    CAN_FilterInit(&CAN_FilterInitStructure);			//滤波器初始化

#if CAN_RX0_INT_ENABLE
    CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);				//FIFO0消息挂号中断允许.

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;     // 主优先级为1
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;            // 次优先级为0
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
    return 0;
}
unsigned char data0;
unsigned char flag_light;
unsigned char count;
unsigned char flag_headjudge;
#if CAN_RX0_INT_ENABLE	//使能RX0中断
//中断服务函数
void USB_LP_CAN1_RX0_IRQHandler(void)
{

    CanRxMsg RxMessage;
    PCAN_ADDR pADDR = (PCAN_ADDR)RxMessage.Data;
    CAN_Receive(CAN1, 0, &RxMessage);
    if((RxMessage.Data[0]==chipID)||(RxMessage.Data[0]==chipID+1)||(RxMessage.Data[0]==0x00))
   {
        if(RDPtr==WRPtr)                        //每次来到新的数据的时候，如果读指针不在首地址，则同时将读指针和写指针向首地址方向移动(RDPtr-recvBuffer>0)
        {
//        memmove(recvBuffer,RDPtr, WRPtr-RDPtr);    //define a read pointer and a write pointer, both of them start from recvBuffer
            WRPtr=recvBuffer;//+(WRPtr-RDPtr);            //move the pointer backwards
            RDPtr=recvBuffer;                          //the read pointer is fixed to the begining after the new data arrival
        }
        if((RxMessage.Data[1]&0x80) == 0x80 )          // the MSB of the source ID is set to 1 if this frame is the first one of the packet
        {
            if(RxMessage.Data[0] == 0)
            {
                if(RxMessage.Data[6] > 8)                  //flag_headjudge 这个信号目的是避免丢帧
                    flag_headjudge = 1;
            }

            memcpy(recvBuffer + (WRPtr-recvBuffer), RxMessage.Data,RxMessage.DLC);  //读指针和写指针都指向下一个
            WRPtr = WRPtr + RxMessage.DLC;
        }
        else
        {
            if(flag_headjudge)
            {
                flag_headjudge =0;
                memcpy(recvBuffer + (WRPtr-recvBuffer), &RxMessage.Data[2],RxMessage.DLC-2);// 非第一帧数据
                WRPtr = WRPtr + RxMessage.DLC-2;
            }
        }
    }
}


#endif

//can发送一组数据(固定格式:ID为0X12,标准帧,数据帧)
//len:数据长度(最大为8)
//msg:数据指针,最大为8个字节.
//返回值:0,成功;
//		 其他,失败;
u8 Can_Send_Msg(u8* msg,u8 len)
{
    u8 mbox;
    u16 i=0;
    CanTxMsg TxMessage;
    TxMessage.StdId=chipID;			// 标准标识符
    TxMessage.ExtId=0x00;			// 设置扩展标示符
    TxMessage.IDE=CAN_Id_Standard; 	// 标准帧
    TxMessage.RTR=CAN_RTR_Data;		// 数据帧
    TxMessage.DLC=len;				// 要发送的数据长度
    for(i=0; i<len; i++)
        TxMessage.Data[i]=msg[i];
    mbox= CAN_Transmit(CAN1, &TxMessage);
//  if (mbox == CAN_TxStatus_NoMailBox)
//	{
//	  while(1);
//	}
    i=0;
    while((CAN_TransmitStatus(CAN1, mbox)==CAN_TxStatus_Failed)&&(i<0XFFF))i++;	//等待发送结束
    if(i>=0XFFF)
        return 1;
    return 0;
}
//can口接收数据查询
//buf:数据缓存区;
//返回值:0,无数据被收到;
//		 其他,接收的数据长度;
u8 Can_Receive_Msg(u8 *buf)
{
    u32 i;
    CanRxMsg RxMessage;
    if( CAN_MessagePending(CAN1,CAN_FIFO0)==0)
        return 0;		//没有接收到数据,直接退出
    CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);//读取数据
    for(i=0; i<8; i++)
        buf[i]=RxMessage.Data[i];
    return RxMessage.DLC;
}


void SendPacket(u8 SouID,u8 ACKorNOTI)
{

//   PCAN_ADDR pADDR = (PCAN_ADDR)sendBuffer;
//   PCAN_BODY pBODY = (PCAN_BODY)(pADDR+1);
    PCAN_BODY pBODY = (PCAN_BODY)sendBuffer;
    PRFID pRFID = (PRFID)(pBODY+1);
    unsigned char size;
    unsigned char flag;
    unsigned char CanSend[8];
    CanSend[0] = 27;
    CanSend[1] = SouID;
    if(ACKorNOTI == ACK)
    {
        pBODY ->command = CAN_GET_RFID|0x80;
    }
    else
    {
        pBODY ->command = CAN_NTY_RFID;
    }
    size = sizeof(*pBODY)+sizeof(*pRFID)+2;
    pBODY -> size = size;
    memcpy(pRFID ->rfid,relayBuf,16);
    flag =1;
    while(size>=6)
    {
        if(flag==1)
        {
            flag = 0;
//          CanSend[0] = CanSend[0]|0x80;

            CanSend[1] = CanSend[1]|0x80;
            memcpy(&(CanSend[2]),sendBuffer,6);
            size = size -8;
            Can_Send_Msg(CanSend,8);
            memmove(sendBuffer,sendBuffer+6,size);
            CanSend[1] = CanSend[1]&0x7f;

        }
        else
        {
            CanSend[0] = CanSend[0];
            CanSend[1] = CanSend[1];
            memcpy(&(CanSend[2]),sendBuffer,6);
            size = size - 6;
            Can_Send_Msg(CanSend,8);
            memmove(sendBuffer,sendBuffer+6,size);
        }
    }
    if(size>0)
    {
        CanSend[0] = CanSend[0];
        CanSend[1] = CanSend[1];
        memcpy(&(CanSend[2]),sendBuffer,size);
        Can_Send_Msg(CanSend,size+2);
    }
}










